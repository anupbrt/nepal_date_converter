require "nepal_date_converter/version"
#require 'debugger'

module NepalDateConverter
  extend self

  # arbitrary date, nepali version and AD version
  SEED_DATES = ['2070-6-13','2013-09-29']

  NEPALI_YEARS_AND_DAYS_IN_MONTH =
  [
    [2000,30,32,31,32,31,30,30,30,29,30,29,31],
    [2001,31,31,32,31,31,31,30,29,30,29,30,30],
    [2002,31,31,32,32,31,30,30,29,30,29,30,30],
    [2003,31,32,31,32,31,30,30,30,29,29,30,31],
    [2004,30,32,31,32,31,30,30,30,29,30,29,31],
    [2005,31,31,32,31,31,31,30,29,30,29,30,30],
    [2006,31,31,32,32,31,30,30,29,30,29,30,30],
    [2007,31,32,31,32,31,30,30,30,29,29,30,31],
    [2008,31,31,31,32,31,31,29,30,30,29,29,31],
    [2009,31,31,32,31,31,31,30,29,30,29,30,30],
    [2010,31,31,32,32,31,30,30,29,30,29,30,30],
    [2011,31,32,31,32,31,30,30,30,29,29,30,31],
    [2012,31,31,31,32,31,31,29,30,30,29,30,30],
    [2013,31,31,32,31,31,31,30,29,30,29,30,30],
    [2014,31,31,32,32,31,30,30,29,30,29,30,30],
    [2015,31,32,31,32,31,30,30,30,29,29,30,31],
    [2016,31,31,31,32,31,31,29,30,30,29,30,30],
    [2017,31,31,32,31,31,31,30,29,30,29,30,30],
    [2018,31,32,31,32,31,30,30,29,30,29,30,30],
    [2019,31,32,31,32,31,30,30,30,29,30,29,31],
    [2020,31,31,31,32,31,31,30,29,30,29,30,30],
    [2021,31,31,32,31,31,31,30,29,30,29,30,30],
    [2022,31,32,31,32,31,30,30,30,29,29,30,30],
    [2023,31,32,31,32,31,30,30,30,29,30,29,31],
    [2024,31,31,31,32,31,31,30,29,30,29,30,30],
    [2025,31,31,32,31,31,31,30,29,30,29,30,30],
    [2026,31,32,31,32,31,30,30,30,29,29,30,31],
    [2027,30,32,31,32,31,30,30,30,29,30,29,31],
    [2028,31,31,32,31,31,31,30,29,30,29,30,30],
    [2029,31,31,32,31,32,30,30,29,30,29,30,30],
    [2030,31,32,31,32,31,30,30,30,29,29,30,31],
    [2031,30,32,31,32,31,30,30,30,29,30,29,31],
    [2032,31,31,32,31,31,31,30,29,30,29,30,30],
    [2033,31,31,32,32,31,30,30,29,30,29,30,30],
    [2034,31,32,31,32,31,30,30,30,29,29,30,31],
    [2035,30,32,31,32,31,31,29,30,30,29,29,31],
    [2036,31,31,32,31,31,31,30,29,30,29,30,30],
    [2037,31,31,32,32,31,30,30,29,30,29,30,30],
    [2038,31,32,31,32,31,30,30,30,29,29,30,31],
    [2039,31,31,31,32,31,31,29,30,30,29,30,30],
    [2040,31,31,32,31,31,31,30,29,30,29,30,30],
    [2041,31,31,32,32,31,30,30,29,30,29,30,30],
    [2042,31,32,31,32,31,30,30,30,29,29,30,31],
    [2043,31,31,31,32,31,31,29,30,30,29,30,30],
    [2044,31,31,32,31,31,31,30,29,30,29,30,30],
    [2045,31,32,31,32,31,30,30,29,30,29,30,30],
    [2046,31,32,31,32,31,30,30,30,29,29,30,31],
    [2047,31,31,31,32,31,31,30,29,30,29,30,30],
    [2048,31,31,32,31,31,31,30,29,30,29,30,30],
    [2049,31,32,31,32,31,30,30,30,29,29,30,30],
    [2050,31,32,31,32,31,30,30,30,29,30,29,31],
    [2051,31,31,31,32,31,31,30,29,30,29,30,30],
    [2052,31,31,32,31,31,31,30,29,30,29,30,30],
    [2053,31,32,31,32,31,30,30,30,29,29,30,30],
    [2054,31,32,31,32,31,30,30,30,29,30,29,31],
    [2055,31,31,32,31,31,31,30,29,30,29,30,30],
    [2056,31,31,32,31,32,30,30,29,30,29,30,30],
    [2057,31,32,31,32,31,30,30,30,29,29,30,31],
    [2058,30,32,31,32,31,30,30,30,29,30,29,31],
    [2059,31,31,32,31,31,31,30,29,30,29,30,30],
    [2060,31,31,32,32,31,30,30,29,30,29,30,30],
    [2061,31,32,31,32,31,30,30,30,29,29,30,31],
    [2062,30,32,31,32,31,31,29,30,29,30,29,31],
    [2063,31,31,32,31,31,31,30,29,30,29,30,30],
    [2064,31,31,32,32,31,30,30,29,30,29,30,30],
    [2065,31,32,31,32,31,30,30,30,29,29,30,31],
    [2066,31,31,31,32,31,31,29,30,30,29,29,31],
    [2067,31,31,32,31,31,31,30,29,30,29,30,30],
    [2068,31,31,32,32,31,30,30,29,30,29,30,30],
    [2069,31,32,31,32,31,30,30,30,29,29,30,31],
    [2070,31,31,31,32,31,31,29,30,30,29,30,30],
    [2071,31,31,32,31,31,31,30,29,30,29,30,30],
    [2072,31,32,31,32,31,30,30,29,30,29,30,30],
    [2073,31,32,31,32,31,30,30,30,29,29,30,31],
    [2074,31,31,31,32,31,31,30,29,30,29,30,30],
    [2075,31,31,32,31,31,31,30,29,30,29,30,30],
    [2076,31,32,31,32,31,30,30,30,29,29,30,30],
    [2077,31,32,31,32,31,30,30,30,29,30,29,31],
    [2078,31,31,31,32,31,31,30,29,30,29,30,30],
    [2079,31,31,32,31,31,31,30,29,30,29,30,30],
    [2080,31,32,31,32,31,30,30,30,29,29,30,30],
    [2081,31,31,32,32,31,30,30,30,29,30,30,30],
    [2082,30,32,31,32,31,30,30,30,29,30,30,30],
    [2083,31,31,32,31,31,30,30,30,29,30,30,30],
    [2084,31,31,32,31,31,30,30,30,29,30,30,30],
    [2085,31,32,31,32,30,31,30,30,29,30,30,30],
    [2086,30,32,31,32,31,30,30,30,29,30,30,30],
    [2087,31,31,32,31,31,31,30,30,29,30,30,30],
    [2088,30,31,32,32,30,31,30,30,29,30,30,30],
    [2089,30,32,31,32,31,30,30,30,29,30,30,30],
    [2090,30,32,31,32,31,30,30,30,29,30,30,30]
  ]

  # format of napali date should be yyyy-mm-dd or yyyy/mm/dd or yyyy-m-d or yyyy/m/d or
  def convert_to_ad_date(nepali_date)
    seed_date_ad = Date.parse(SEED_DATES.last)
    difference = days_between_nepali_dates(SEED_DATES.first, nepali_date)
    new_date = seed_date_ad - difference
    new_date.to_s
  end

  # start_date is later date, end_date is earlier date
  def days_between_nepali_dates(initial_start_date, initial_end_date)
    start_date,end_date = (initial_end_date > initial_start_date) ? [initial_end_date,initial_start_date] : [initial_start_date,initial_end_date]
    start_year,start_month,start_day = start_date.to_s.split(/[-\/]/)
    end_year,end_month,end_day = end_date.to_s.split(/[-\/]/)
    start_array = NEPALI_YEARS_AND_DAYS_IN_MONTH.assoc(start_year.to_i)
    end_array = NEPALI_YEARS_AND_DAYS_IN_MONTH.assoc(end_year.to_i)
    # raise ArgumentError.new("Out of range") unless start_array and end_array
    if start_year == end_year
      return (start_day.to_i - end_day.to_i) if end_month == start_month
    else
      # days passed this year
      difference = start_array[1..start_month.to_i-1].inject(:+) + start_day.to_i
      # days passed initial year
      difference += end_array[end_month.to_i+1..-1].inject(:+) + end_array[end_month.to_i] - end_day.to_i
      # all the days in the intervening years
      intervening_years = NEPALI_YEARS_AND_DAYS_IN_MONTH[NEPALI_YEARS_AND_DAYS_IN_MONTH.index(end_array)+1..NEPALI_YEARS_AND_DAYS_IN_MONTH.index(start_array)-1]
      # if the years are more than one year apart
      difference += intervening_years.inject(0) { |sum, year_array| sum += year_array[1..-1].inject(:+); sum } if intervening_years.size > 0
      initial_end_date > initial_start_date ? 0 - difference : difference
      # difference
    end

  end

  private

end
